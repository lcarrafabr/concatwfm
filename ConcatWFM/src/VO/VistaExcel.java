/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package VO;

import Classes.CadastroCelulas;
import Classes.CadastroHierarquia;
import Classes.ClassConecta;
import Classes.Funcionarios;
import Classes.FuncionariosCelulas;
import Classes.Funcoes;
import java.awt.HeadlessException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author luciano.benfica
 */
public class VistaExcel extends javax.swing.JFrame {

    /**
     * Creates new form VistaExcel
     */
    public VistaExcel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnImportar = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTDatos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        total_linhasjLabel = new javax.swing.JLabel();
        atualizaFMABancojButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnImportar.setText("Importar");
        btnImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarActionPerformed(evt);
            }
        });

        btnExportar.setText("Exportar");

        jTDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTDatos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTDatos);

        jLabel1.setText("total de linhas:");

        total_linhasjLabel.setText("0");

        atualizaFMABancojButton.setText("Atualiza FMA");
        atualizaFMABancojButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizaFMABancojButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Usar planilha com extensão .xlsx");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 979, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(total_linhasjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnImportar)
                                .addGap(18, 18, 18)
                                .addComponent(btnExportar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(atualizaFMABancojButton)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImportar)
                    .addComponent(btnExportar)
                    .addComponent(atualizaFMABancojButton)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(total_linhasjLabel))
                .addContainerGap(161, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ClassConecta conecta = new ClassConecta();
    int contador;
    int contador_coluna;
    int i = 0;
    int j = 0;
    Object oLinha_vazia; // verifica se a linha está vazia ou não

    //Dados para enviar para o banco
    private int matricula;
    private String nome_sup_atual;
    private String celula_Atual;
    private int dias_data_mov;
    private String novo_sup;
    private String nova_celula;

    // Variaveis de consultas e transformacoes
    private String data_movimentacao = "1900-01-01";
    private String dataD_1 = "1900-01-01";
    private int matricula_supervisor;
    private int celula_id;
    private int verifica_matricula;

    //operador_mensagem
    private int operador_mensagem = -1;

    private void verificaMatricula() {

        Funcionarios oFunc = new Funcionarios();

        try {

            ResultSet rs;

            oFunc.setMatricula(matricula);
            rs = oFunc.getConsultar();

            if (rs.next() == true) {

                verifica_matricula = rs.getInt("MATRICULA");

            } else {
                verifica_matricula = -1;
                JOptionPane.showMessageDialog(null, "Atenção!\n"
                        + "Não foi encontrado a matrícula: " + matricula + " na linha: "
                        + (i + 1) + "\n Cadastrado no banco de dados.", "mensagem do sistema", JOptionPane.WARNING_MESSAGE);
            }

            System.out.println(verifica_matricula);

        } catch (SQLException e) {
            operador_mensagem = -1;
            JOptionPane.showMessageDialog(null, "Erro ao verificar se existe a matricula no banco.\n"
                    + "Erro na linha: " + (i + 1) + "\n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void getIDovaCelula() {
        /**
         * Resgata o código da nova célula. Se a nova célula for null o id será
         * -1
         */
        CadastroCelulas oCadCel = new CadastroCelulas();
        ResultSet rs;

        if (nova_celula != null) {
            try {
                oCadCel.setCelula_nome(nova_celula + "%");
                rs = oCadCel.getConsultar();
                rs.next();

                celula_id = rs.getInt("CELULA_ID");

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Erro ao retornar o ID# da nova célula\n" + e,
                        "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            celula_id = -1;
        }
    }

    private void getMatriculaNovoSupervisor() {

        Funcionarios oFunc = new Funcionarios();
        ResultSet rs;

        if (novo_sup != null) {
            try {
                oFunc.setNome(novo_sup + "%");
                rs = oFunc.getConsultar();
                rs.next();

                matricula_supervisor = rs.getInt("MATRICULA");

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Erro ao retornar o matrícula do supervisor\n" + e,
                        "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            matricula_supervisor = -1;
        }
    }

    private void calculaDataMovimentacao() {
        /**
         * Quando importamos o FMA para o jTable a data se transforma em total
         * de dias de 01/01/1900 até a data do FMA. Essa função calcula o total
         * de dias para retornar a data de movimentação. Ex: 01/01/1900 + 43118
         * dias = 18/01/2017
         */
        try {
            data_movimentacao = "1900-01-01";
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Calendar c = Calendar.getInstance();
            c.setTime(sdf.parse(data_movimentacao));
            c.add(Calendar.DAY_OF_MONTH, dias_data_mov - 2);// aqui jogo a qtd de dias. OBs: tem que subtrair -2 não me pergunte porque.
            data_movimentacao = sdf.format(c.getTime());
//            System.out.println(data_movimentacao);       
        } catch (ParseException e) {
            System.out.println(e);
        }
    }

    private void calculaDataD_1() {
        /**
         * Transforma a data de movimentação em D-1
         */
        try {
            dataD_1 = data_movimentacao;
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Calendar c = Calendar.getInstance();
            c.setTime(sdf.parse(dataD_1));
            c.add(Calendar.DAY_OF_MONTH, - 1);// Pega a data de movimentação e transforma em D-1
            dataD_1 = sdf.format(c.getTime());
//            System.out.println(data_movimentacao);       
        } catch (ParseException e) {
            System.out.println(e);
        }
    }

    private void verificaLinhaVazia() {
        try {
            oLinha_vazia = jTDatos.getValueAt(jTDatos.getSelectedRow(), 0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Existe linhas vazias no FMA\n"
                    + "Por favor, corrija a planilha antes de subir no banco de dados.\n" + e, "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void carregaVariaveis() {

        /**
         * Verifica se as celulas não estão nulas Se diferente de null carrega o
         * calor da celula, senão carrega null
         */
        final Object oMatricula = jTDatos.getValueAt(jTDatos.getSelectedRow(), 1);
        final Object oNome_sup_atual = jTDatos.getValueAt(jTDatos.getSelectedRow(), 4);
        final Object oCelula_Atual = jTDatos.getValueAt(jTDatos.getSelectedRow(), 5);
        final Object oDias_data_mov = jTDatos.getValueAt(jTDatos.getSelectedRow(), 8);
        final Object oNovo_sup = jTDatos.getValueAt(jTDatos.getSelectedRow(), 12);
        final Object nova_cel = jTDatos.getValueAt(jTDatos.getSelectedRow(), 13);

        //MATRICULA
        if (oMatricula == null) {
            matricula = -1;
        } else {
            matricula = Integer.parseInt(jTDatos.getValueAt(jTDatos.getSelectedRow(), 1).toString().trim());
        }

        //Supervisor atual
        if (oNome_sup_atual == null) {
            nome_sup_atual = null;
        } else {
            nome_sup_atual = jTDatos.getValueAt(jTDatos.getSelectedRow(), 4).toString().substring(0, 15).trim();
        }

        //Celula atual
        if (oCelula_Atual == null) {
            celula_Atual = null;
        } else {
            celula_Atual = jTDatos.getValueAt(jTDatos.getSelectedRow(), 5).toString().substring(0, 17).trim();
        }

        //Dias data atual
        if (oDias_data_mov == null) {
            dias_data_mov = -1;
        } else {
            dias_data_mov = Integer.parseInt(jTDatos.getValueAt(jTDatos.getSelectedRow(), 8).toString().trim());
        }

        // Novo SUP
        if (oNovo_sup == null) {
            novo_sup = null;
        } else {
            novo_sup = jTDatos.getValueAt(jTDatos.getSelectedRow(), 12).toString().substring(0, 15).trim();
        }

        // nova celula
        if (nova_cel == null) {
            nova_celula = null;
        } else {
            nova_celula = jTDatos.getValueAt(jTDatos.getSelectedRow(), 13).toString().substring(0, 17).trim();
        }

    }

    private void VerificarDadosTabela() {

        try {
//        JOptionPane.showMessageDialog(null, contador);
            for (i = 0; i < contador; i++) {

                jTDatos.clearSelection();
                jTDatos.addRowSelectionInterval(i, i);

                verificaLinhaVazia();//verifica se existe linhas vazias

                if (oLinha_vazia == null) {
                    JOptionPane.showMessageDialog(null, "Mensagem do sistema", dataD_1, HEIGHT);
                    i++;

                } else {

                    carregaVariaveis();
                    calculaDataMovimentacao();
                    calculaDataD_1();
                    getMatriculaNovoSupervisor();
                    getIDovaCelula();
                    verificaMatricula();

                    //Se não existir uma data de modificação looping pe parado.
                    if (dias_data_mov == -1) {
                        JOptionPane.showMessageDialog(null, "Existe linhas vazias no FMA\n"
                                + "Por favor, corrija a planilha antes de subir no banco de dados.", "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                    if (verifica_matricula == -1) {
                        operador_mensagem = -1;
                        break;
                    }

                    // aqui verifico o tipo de envio e excecução
                    if (matricula_supervisor != -1) {

//                        JOptionPane.showMessageDialog(null, "Mudar o supervisor do agente");
                        operador_mensagem = 1;
                    }

                    if (celula_id != -1) {

//                        JOptionPane.showMessageDialog(null, "Mudar a célula do agente");
                        operador_mensagem = 1;
                    }

                    if (celula_id == -1 && matricula_supervisor == -1) {
                        operador_mensagem = -1;
                        JOptionPane.showMessageDialog(null, "Atenção!\n"
                                + "Não foi encontrado novo supervisor e/ou nova celula na linha: " + (i + 1)
                                + "\nPor favor, verifique a planilha FMA.", "mensagem do sistema", JOptionPane.WARNING_MESSAGE);
                        break;
                    }
                }

                System.out.println("Data mov:" + data_movimentacao + " Data D-1: " + dataD_1);

//            JOptionPane.showMessageDialog(null, i);
//                System.out.println("Mat: " + matricula
//                        + "    SUP_Atual: " + nome_sup_atual
//                        + "    Cel_Atual: " + celula_Atual
//                        //                        + "    Dias data mov: " + dias_data_mov
//                        + "     Data mov: " + data_movimentacao
//                        + "    Novo Sup: " + novo_sup
//                        + "    Nova celula: " + nova_celula
//                        + "    Mat novo sup: " + matricula_supervisor
//                        + "     Id Nova Cel: " + celula_id);
            }// FIM DO FOR

            if (operador_mensagem == 1) {
                atualizaFMABancojButton.setVisible(true);
                JOptionPane.showMessageDialog(null, "Variáveis carregadas com sucesso!", "mensagem do sistema", JOptionPane.INFORMATION_MESSAGE);
            } else {
                atualizaFMABancojButton.setVisible(false);
                JOptionPane.showMessageDialog(null, "O processo de verificação não foi concluído.", "mensagem do sistema", JOptionPane.WARNING_MESSAGE);
            }

        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Erro ao caregar variáveis do programa.\n"
                    + "Por favor, verifique a planilha FMA ou entre em contato com o administrador do programa.\n"
                    + e, "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void AtualizaFMABanco() {

        try {

            for (j = 0; j < contador; j++) {

                jTDatos.clearSelection();
                jTDatos.addRowSelectionInterval(j, j);

                carregaVariaveis();
                calculaDataMovimentacao();
                calculaDataD_1();
                getMatriculaNovoSupervisor();
                getIDovaCelula();

                if (!nome_sup_atual.equals(novo_sup)) {// se o sup. atual for diferente do novo sup. axecutar a função abaixo
                    //Se existir um supervisor no FMA e as verificações estiverem corretas, executa as funções abaixo
                    if (matricula_supervisor != -1) {

                        alterarHiearquia();
                        setNovaHierarquia();
                    }
                }

                if (!celula_Atual.equals(nova_celula)) {// se a celula atual for diferente da nova celula, executa a função abaixo
                    //Se existir uma celula no FMA e as verificações estiverem OK executa as funções de atualziação abaixo
                    if (celula_id != -1) {
                        setAlterarCelula();
                        setNovaCelula();
                    }
                }

            }//FIM do FOR

        } catch (HeadlessException e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "Erro ao atualizar o FMA da linha: " + (j + 1) + "/n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }
        JOptionPane.showMessageDialog(null, "FMA Atualizado com sucesso!", "Mensagem do sistema", JOptionPane.INFORMATION_MESSAGE);

    }

    private void alterarHiearquia() {
        CadastroHierarquia oCadHier = new CadastroHierarquia();

        try {
            oCadHier.setUpdate_from_date(Funcoes.getDataFormatBR("30/12/9999"));
            oCadHier.setTo_date_FMA(dataD_1);
            oCadHier.setMatricula_lider(matricula_supervisor);
            oCadHier.setMatricula(matricula);
            oCadHier.setAlterar(conecta);
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar o FMA da linha: " + (j + 1) + "/n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void setNovaHierarquia() {

        CadastroHierarquia oCadHier = new CadastroHierarquia();

        try {
            oCadHier.setMatricula(matricula);
            oCadHier.setMatricula_lider(matricula_supervisor);
            oCadHier.setFrom_date_FMA(data_movimentacao);
            oCadHier.setTo_date(Funcoes.getDataFormatBR("30/12/9999"));
            oCadHier.setCadastrar();
        } catch (ParseException e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "Erro ao atualizar o FMA da linha: " + (j + 1) + "/n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void setAlterarCelula() {

        FuncionariosCelulas oFuncCel = new FuncionariosCelulas();

        try {
            oFuncCel.setUpdate_from_date(Funcoes.getDataFormatBR("30/12/9999"));
            oFuncCel.setTo_date_FMA(dataD_1);
            oFuncCel.setMatricula(matricula);
            oFuncCel.setAlterar(conecta);
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar celula no FMA da linha: " + (j + 1) + "/n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);

        }
    }

    private void setNovaCelula() {

        FuncionariosCelulas oFuncCel = new FuncionariosCelulas();

        try {

            oFuncCel.setCelula_id(celula_id);
            oFuncCel.setMatricula(matricula);
            oFuncCel.setFrom_date_FMA(data_movimentacao);
            oFuncCel.setTo_date(Funcoes.getDataFormatBR("30/12/9999"));
            oFuncCel.setCadastrar();

        } catch (ParseException e) {
        }

    }

    private void btnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarActionPerformed
        // TODO add your handling code here:
        contador = jTDatos.getRowCount();
        contador_coluna = jTDatos.getColumnCount();

        total_linhasjLabel.setText(Integer.toString(contador));

        if (contador_coluna > 14) {
            operador_mensagem = -1;
            JOptionPane.showMessageDialog(null, "Existe colunas a mais na planilha de FMA\n"
                    + "Por favor, corrija a planilha antes de subir no banco de dados.", "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        } else {
            VerificarDadosTabela();
        }
        jTDatos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

    }//GEN-LAST:event_btnImportarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        atualizaFMABancojButton.setVisible(false);
        btnExportar.setVisible(false);
        try {
            ClassConecta.conecta();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao abrir conexão com o banco de dados.\n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_formWindowOpened

    private void atualizaFMABancojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizaFMABancojButtonActionPerformed
        // TODO add your handling code here:
        AtualizaFMABanco();
    }//GEN-LAST:event_atualizaFMABancojButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaExcel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new VistaExcel().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton atualizaFMABancojButton;
    public javax.swing.JButton btnExportar;
    public javax.swing.JButton btnImportar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTDatos;
    private javax.swing.JLabel total_linhasjLabel;
    // End of variables declaration//GEN-END:variables
}
