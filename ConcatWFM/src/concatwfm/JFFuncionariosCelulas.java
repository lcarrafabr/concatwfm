/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package concatwfm;

import Classes.*;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luciano.benfica
 */
public class JFFuncionariosCelulas extends javax.swing.JDialog {

    /**
     * Creates new form JFFuncionariosCelulas
     */
    public JFFuncionariosCelulas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nomejLabel = new javax.swing.JLabel();
        matriculajLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        comboCelulajComboBox = new javax.swing.JComboBox();
        cadastrarCelulajButton = new javax.swing.JButton();
        operacaojTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        datajLabel = new javax.swing.JLabel();
        dataPersonalisadajCheckBox = new javax.swing.JCheckBox();
        alterarCelulajButton = new javax.swing.JButton();
        dataNovaCelulajDateChooser = new com.toedter.calendar.JDateChooser();
        editarjButton = new javax.swing.JButton();
        excluirjButton = new javax.swing.JButton();
        separadorjSeparator = new javax.swing.JSeparator();
        dataFromjLabel = new javax.swing.JLabel();
        alterFromDatejFormattedTextField = new javax.swing.JFormattedTextField();
        alterToDatejFormattedTextField = new javax.swing.JFormattedTextField();
        dataTojLabel = new javax.swing.JLabel();
        alterarCelulajLabel = new javax.swing.JLabel();
        cadastrarNovaCelulajButton = new javax.swing.JButton();
        editarRegistrojButton = new javax.swing.JButton();
        comboCelulaAlterarjComboBox = new javax.swing.JComboBox();
        ateOMomentojCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        gradeFuncCelulajTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setText("Nome:");

        jLabel2.setText("Matrícula:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomejLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(matriculajLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(matriculajLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(nomejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setText("Célula");

        comboCelulajComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCelulajComboBoxActionPerformed(evt);
            }
        });

        cadastrarCelulajButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/add_small.png"))); // NOI18N
        cadastrarCelulajButton.setToolTipText("Cadastrar células");
        cadastrarCelulajButton.setContentAreaFilled(false);
        cadastrarCelulajButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cadastrarCelulajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarCelulajButtonActionPerformed(evt);
            }
        });

        operacaojTextField.setEditable(false);

        jLabel4.setText("Operação");

        datajLabel.setText("Data da alteração");

        dataPersonalisadajCheckBox.setText("Usar data personalizada");
        dataPersonalisadajCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataPersonalisadajCheckBoxActionPerformed(evt);
            }
        });

        alterarCelulajButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/save2.png"))); // NOI18N
        alterarCelulajButton.setText("Alterar célula");
        alterarCelulajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarCelulajButtonActionPerformed(evt);
            }
        });

        editarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/edit.png"))); // NOI18N
        editarjButton.setText("Editar");
        editarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarjButtonActionPerformed(evt);
            }
        });

        excluirjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/delete.png"))); // NOI18N
        excluirjButton.setText("Excluir");

        dataFromjLabel.setText("Data Início");

        try {
            alterFromDatejFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            alterToDatejFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        dataTojLabel.setText("Data Fim");

        alterarCelulajLabel.setText("Célula");

        cadastrarNovaCelulajButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/add_small.png"))); // NOI18N
        cadastrarNovaCelulajButton.setToolTipText("Cadastra uma nova célula");
        cadastrarNovaCelulajButton.setContentAreaFilled(false);
        cadastrarNovaCelulajButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cadastrarNovaCelulajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarNovaCelulajButtonActionPerformed(evt);
            }
        });

        editarRegistrojButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/save2.png"))); // NOI18N
        editarRegistrojButton.setText("Editar Registro");
        editarRegistrojButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarRegistrojButtonActionPerformed(evt);
            }
        });

        comboCelulaAlterarjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCelulaAlterarjComboBoxActionPerformed(evt);
            }
        });

        ateOMomentojCheckBox.setText("Até o momento");
        ateOMomentojCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ateOMomentojCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(separadorjSeparator)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(comboCelulajComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cadastrarCelulajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(datajLabel)
                                    .addComponent(dataNovaCelulajDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dataPersonalisadajCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(excluirjButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editarjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addComponent(operacaojTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(alterarCelulajButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(alterFromDatejFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dataFromjLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataTojLabel)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(alterToDatejFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ateOMomentojCheckBox)))
                        .addGap(181, 181, 181)
                        .addComponent(editarRegistrojButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(alterarCelulajLabel)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(comboCelulaAlterarjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cadastrarNovaCelulajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboCelulajComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cadastrarCelulajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(operacaojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(datajLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dataPersonalisadajCheckBox)
                        .addComponent(alterarCelulajButton)
                        .addComponent(editarjButton)
                        .addComponent(excluirjButton))
                    .addComponent(dataNovaCelulajDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(separadorjSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dataFromjLabel)
                            .addComponent(dataTojLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(alterFromDatejFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alterToDatejFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ateOMomentojCheckBox)))
                    .addComponent(editarRegistrojButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(alterarCelulajLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cadastrarNovaCelulajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboCelulaAlterarjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Alterar Célula", jPanel3);

        gradeFuncCelulajTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data início", "Data Fim", "Matrícula", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gradeFuncCelulajTable.getTableHeader().setReorderingAllowed(false);
        gradeFuncCelulajTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gradeFuncCelulajTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(gradeFuncCelulajTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    ClassConecta conecta = new ClassConecta();
    int recebe_matricula;
    String recebe_nome;
    private ComboItem combo_operacao;
    private ComboItem combo_celula;
    private ComboItem combo_celula_alterar;
    private int contador_grade;
    private String data_admissao;
    private String data_calcular;
    private String data_final;
    private String data_atual;
    private String click_from_date;
    private String click_to_date;
    private String To_date_checkbox;

    // variaveis para edicao ou exclusao de dados na tabela
    private String data_from;
    private String data_to;

    private int operador_botao_editar = -1; // usado para as configurações do botão

    public void getGrandeFuncionariosCelulas() throws ParseException {
        //Consultar Celulas
        FuncionariosCelulas oFuncCel = new FuncionariosCelulas();

        ResultSet resultSet = null;

        String[] colunasTabela = new String[]{"Data início", "Data Fim", "Matrícula", "Célula"};
        DefaultTableModel modeloTabela = new DefaultTableModel(null, colunasTabela) {

            @Override
            public boolean isCellEditable(int row, int col) {
                return false;
            }
        };
        gradeFuncCelulajTable.setModel(modeloTabela);
        gradeFuncCelulajTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        gradeFuncCelulajTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        gradeFuncCelulajTable.getColumnModel().getColumn(2).setPreferredWidth(50);
        gradeFuncCelulajTable.getColumnModel().getColumn(3).setPreferredWidth(50);

        try {

            oFuncCel.setMatricula(recebe_matricula);
            resultSet = oFuncCel.getConsultar();

            if (resultSet.getRow() == 1) {
                resultSet.first();
            }

        } catch (SQLException ex) {
            Logger.getLogger(FuncionariosStatus.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {

            while (resultSet.next()) {

                Date FROM_DATE = resultSet.getDate("FROM_DATE");
                String data_from = null;
                if (FROM_DATE != null) {
                    SimpleDateFormat formatoDataLanc = new SimpleDateFormat("dd/MM/yyyy");
                    data_from = formatoDataLanc.format(FROM_DATE);
                }

                Date TO_DATE = resultSet.getDate("TO_DATE");
                String data_to = null;
                String verifica = null;
                if (TO_DATE != null) {
                    SimpleDateFormat formatoDataLanc = new SimpleDateFormat("dd/MM/yyyy");
                    data_to = formatoDataLanc.format(TO_DATE);

                    if (data_to.equals("30/12/9999")) {
                        verifica = "Até o momento";
                    } else {
                        verifica = data_to;
                    }

                }

                modeloTabela.addRow(new String[]{
                    data_from,
                    verifica,
                    resultSet.getString("MATRICULA"),
                    resultSet.getString("CELULA_NOME")
                });
            }

        } catch (SQLException ex) {
            Logger.getLogger(FuncionariosStatus.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void getFieldAlterar(int click_matricula, String click_from_date, String click_to_date) throws ParseException {

        FuncionariosCelulas oFuncCEl = new FuncionariosCelulas();
        ResultSet rs;
        oFuncCEl.setMatricula(click_matricula);
        oFuncCEl.setFrom_date(Funcoes.getDataFormatBR(click_from_date));

        try {
            rs = oFuncCEl.getConsultar();
            rs.next();

            //Pegar campos
            alterFromDatejFormattedTextField.setText(Funcoes.getDataFormat(rs.getDate("FROM_DATE")));
            alterToDatejFormattedTextField.setText(Funcoes.getDataFormat(rs.getDate("TO_DATE")));
            To_date_checkbox = Funcoes.getDataFormat(rs.getDate("TO_DATE"));


        } catch (SQLException ex) {
            Logger.getLogger(Funcionarios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void atualizaGrade() {
        try {
            getGrandeFuncionariosCelulas();
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar grade\n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void contadorGrade() {

        contador_grade = gradeFuncCelulajTable.getRowCount();
    }

    private void atualizaOperacoes() {

        CadastroCelulas oCadCel = new CadastroCelulas();
        combo_operacao = (ComboItem) comboCelulajComboBox.getSelectedItem();

        ResultSet rs;

        try {
            oCadCel.setCelula_id(combo_operacao.getId());
            rs = oCadCel.getConsultar();
            while (rs.next()) {
                operacaojTextField.setText(rs.getString("OPERACAO_NAME"));
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualziar o campo operacoes.\n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void atualizaComboCelulas() {

        CadastroCelulas oCadCel = new CadastroCelulas();

        ResultSet rs;

        try {

            rs = oCadCel.getConsultar();
            comboCelulajComboBox.removeAllItems();
            while (rs.next()) {
                comboCelulajComboBox.addItem(new ComboItem(rs.getInt("CELULA_ID"), rs.getString("CELULA_NOME")));
            }
            comboCelulajComboBox.updateUI();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualziar o combo células\n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void atualizaComboCelulasAlterar() {

        CadastroCelulas oCadCel = new CadastroCelulas();

        ResultSet rs;

        try {

            rs = oCadCel.getConsultar();
            comboCelulaAlterarjComboBox.removeAllItems();
            while (rs.next()) {
                comboCelulaAlterarjComboBox.addItem(new ComboItem(rs.getInt("CELULA_ID"), rs.getString("CELULA_NOME")));
            }
            comboCelulaAlterarjComboBox.updateUI();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualziar o combo células\n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void getConsultarDataAdmissao() {

        Funcionarios oFunc = new Funcionarios();

        ResultSet rs;
        oFunc.setMatricula(recebe_matricula);
        try {
            rs = oFunc.getConsultar();
            while (rs.next()) {

                data_admissao = Funcoes.getDataFormat(rs.getDate("HIREDATE"));
            }

        } catch (SQLException | ParseException e) {
            JOptionPane.showMessageDialog(null, "Erro ao consultar data de admissão.\n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void calculaData() throws ParseException {

        Calendar c = Calendar.getInstance();
        c.setTime(Funcoes.getDataFormatBR(data_calcular));
        c.add(Calendar.DATE, -1);

        data_final = Funcoes.getDataFormat(c.getTime());
    }

    private void updateCelulas() throws ParseException {

        FuncionariosCelulas oFuncCel = new FuncionariosCelulas();

        if (dataPersonalisadajCheckBox.isSelected()) {

            SimpleDateFormat oDatOut = new SimpleDateFormat("dd/MM/yyyy");
            data_calcular = oDatOut.format(dataNovaCelulajDateChooser.getDate());
            calculaData();
        } else {

            data_calcular = data_atual;
            calculaData();
        }

        if (comboCelulajComboBox.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(null, "O campo celula é obrigatório",
                    "Mensagem do sistema", JOptionPane.WARNING_MESSAGE);
        } else {

            try {

                oFuncCel.setUpdate_from_date(Funcoes.getDataFormatBR("30/12/9999"));
                oFuncCel.setTo_date(Funcoes.getDataFormatBR(data_final));
                oFuncCel.setMatricula(recebe_matricula);
                oFuncCel.setAlterar(conecta);

            } catch (ParseException e) {
                JOptionPane.showMessageDialog(null, "Erro ao atualizar dados.\n" + e, "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void SettingBotaoEditar() {
        String cancel = "/Resources/Cancel.png";
        String edit = "/Resources/edit.png";
        
        
        try {

            if (operador_botao_editar == -1) {

                editarjButton.setText("Cancelar");
                editarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(cancel).getPath()));
                operador_botao_editar = 1;
                setDesocultarCamposALterar();
                

            } else {

                editarjButton.setText("Editar");
                editarjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(edit).getPath()));
                operador_botao_editar = -1;
                setOcultarCamposAlterar();
                
            }

        } catch (Exception e) {
            System.err.println(e);
        }
    }
    
    private void setDesocultarCamposALterar(){
        
        //Esconde os campos para alterar
        separadorjSeparator.setVisible(true);
        dataFromjLabel.setVisible(true);
        dataTojLabel.setVisible(true);
        alterarCelulajLabel.setVisible(true);
        alterFromDatejFormattedTextField.setVisible(true);
        alterToDatejFormattedTextField.setVisible(true);
        comboCelulaAlterarjComboBox.setVisible(true);
        cadastrarNovaCelulajButton.setVisible(true);
        editarRegistrojButton.setVisible(true);
        ateOMomentojCheckBox.setVisible(true);
        
        
        comboCelulajComboBox.setEnabled(false);
        dataNovaCelulajDateChooser.setEnabled(false);
        dataPersonalisadajCheckBox.setEnabled(false);
        alterarCelulajButton.setEnabled(false);
        
    }
    
    private void setOcultarCamposAlterar(){
        
        //Esconde os campos para alterar
        separadorjSeparator.setVisible(false);
        dataFromjLabel.setVisible(false);
        dataTojLabel.setVisible(false);
        alterarCelulajLabel.setVisible(false);
        alterFromDatejFormattedTextField.setVisible(false);
        alterToDatejFormattedTextField.setVisible(false);
        comboCelulaAlterarjComboBox.setVisible(false);
        cadastrarNovaCelulajButton.setVisible(false);
        editarRegistrojButton.setVisible(false);
        ateOMomentojCheckBox.setVisible(false);
        
        comboCelulajComboBox.setEnabled(true);
        dataNovaCelulajDateChooser.setEnabled(true);
        dataPersonalisadajCheckBox.setEnabled(true);
        alterarCelulajButton.setEnabled(true);
        
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        nomejLabel.setText(recebe_nome);
        matriculajLabel.setText(Integer.toString(recebe_matricula));

        alterarCelulajButton.setEnabled(false);
        editarjButton.setEnabled(false);
        excluirjButton.setEnabled(false);

        //Esconde os campos para alterar
        separadorjSeparator.setVisible(false);
        dataFromjLabel.setVisible(false);
        dataTojLabel.setVisible(false);
        alterarCelulajLabel.setVisible(false);
        alterFromDatejFormattedTextField.setVisible(false);
        alterToDatejFormattedTextField.setVisible(false);
        comboCelulaAlterarjComboBox.setVisible(false);
        cadastrarNovaCelulajButton.setVisible(false);
        editarRegistrojButton.setVisible(false);
        ateOMomentojCheckBox.setVisible(false);

        datajLabel.setEnabled(false);
        dataNovaCelulajDateChooser.setEnabled(false);

        try {
            ClassConecta.conecta();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao abrir conexão com o banco de dados" + e, "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }
        try {
            data_atual = Funcoes.getNowBR();
        } catch (ParseException e) {
        }
        atualizaComboCelulas();
        atualizaComboCelulasAlterar();
        getConsultarDataAdmissao();
        atualizaGrade();
    }//GEN-LAST:event_formWindowOpened

    private void comboCelulajComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCelulajComboBoxActionPerformed
        // TODO add your handling code here:

        if (!comboCelulajComboBox.getSelectedItem().equals("")) {

            alterarCelulajButton.setEnabled(true);
            atualizaOperacoes();

        }

    }//GEN-LAST:event_comboCelulajComboBoxActionPerformed

    private void dataPersonalisadajCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataPersonalisadajCheckBoxActionPerformed
        // TODO add your handling code here:

        if (dataPersonalisadajCheckBox.isSelected()) {
            datajLabel.setEnabled(true);
            dataNovaCelulajDateChooser.setEnabled(true);
            dataNovaCelulajDateChooser.grabFocus();
        } else {
            datajLabel.setEnabled(false);
            dataNovaCelulajDateChooser.setEnabled(false);
            dataNovaCelulajDateChooser.setDate(null);
        }
    }//GEN-LAST:event_dataPersonalisadajCheckBoxActionPerformed

    private void alterarCelulajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarCelulajButtonActionPerformed
        // TODO add your handling code here:
        contadorGrade();

        FuncionariosCelulas oFuncCel = new FuncionariosCelulas();

        combo_celula = (ComboItem) comboCelulajComboBox.getSelectedItem();

        if (contador_grade == 0) {

            try {

                oFuncCel.setCelula_id(combo_celula.getId());
                oFuncCel.setMatricula(recebe_matricula);
                oFuncCel.setFrom_date(Funcoes.getDataFormatBR(data_admissao));
                oFuncCel.setTo_date(Funcoes.getDataFormatBR("30/12/9999"));
                oFuncCel.setCadastrar();

            } catch (ParseException e) {
                JOptionPane.showMessageDialog(null, "Erro ao cadastrar\n" + e, "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
            }

        } else {

            try {
                updateCelulas();

                String data;
                if (dataPersonalisadajCheckBox.isSelected()) {

                    SimpleDateFormat oDatOut = new SimpleDateFormat("dd/MM/yyyy");
                    data = oDatOut.format(dataNovaCelulajDateChooser.getDate());
                } else {
                    data = data_atual;
                }
                oFuncCel.setCelula_id(combo_celula.getId());
                oFuncCel.setMatricula(recebe_matricula);
                oFuncCel.setFrom_date(Funcoes.getDataFormatBR(data));
                oFuncCel.setTo_date(Funcoes.getDataFormatBR("30/12/9999"));
                oFuncCel.setCadastrar();

            } catch (ParseException e) {
                JOptionPane.showMessageDialog(null, "Erro ao cadastrar\n" + e, "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
            }

        }
        atualizaGrade();
        contadorGrade();
        alterarCelulajButton.setEnabled(false);
    }//GEN-LAST:event_alterarCelulajButtonActionPerformed

    private void cadastrarCelulajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarCelulajButtonActionPerformed
        // TODO add your handling code here:
        JFCadastroCelula oFormCadCel = new JFCadastroCelula();

        oFormCadCel.setTitle("Cadastro de células");
        oFormCadCel.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        oFormCadCel.setLocationRelativeTo(null);
        oFormCadCel.setModal(true);
        oFormCadCel.pack();
        oFormCadCel.setVisible(true);
    }//GEN-LAST:event_cadastrarCelulajButtonActionPerformed

    private void gradeFuncCelulajTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gradeFuncCelulajTableMouseClicked
        // TODO add your handling code here:
        editarjButton.setEnabled(true);
        excluirjButton.setEnabled(true);

        data_from = gradeFuncCelulajTable.getValueAt(gradeFuncCelulajTable.getSelectedRow(), 0).toString();
        data_to = gradeFuncCelulajTable.getValueAt(gradeFuncCelulajTable.getSelectedRow(), 1).toString();
        
        try {
            getFieldAlterar(recebe_matricula, data_from, data_to);
        } catch (ParseException e) {
            Logger.getLogger(FuncionariosCelulas.class.getName()).log(Level.SEVERE, null, e);
        }

    }//GEN-LAST:event_gradeFuncCelulajTableMouseClicked

    private void editarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarjButtonActionPerformed
        // TODO add your handling code here:
        SettingBotaoEditar();

    }//GEN-LAST:event_editarjButtonActionPerformed

    private void cadastrarNovaCelulajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarNovaCelulajButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cadastrarNovaCelulajButtonActionPerformed

    private void editarRegistrojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarRegistrojButtonActionPerformed
        // TODO add your handling code here:
        FuncionariosCelulas oFuncCel = new FuncionariosCelulas();

        try {

            combo_celula_alterar = (ComboItem) comboCelulaAlterarjComboBox.getSelectedItem();

            SimpleDateFormat oDatOut = new SimpleDateFormat("dd/MM/yyyy");
            String data = oDatOut.format(dataNovaCelulajDateChooser.getDate());

            oFuncCel.setCelula_id(combo_celula.getId());
            oFuncCel.setMatricula(recebe_matricula);
            oFuncCel.setFrom_date(Funcoes.getDataFormatBR(data));
            oFuncCel.setTo_date(Funcoes.getDataFormatBR("30/12/9999"));
//            oFuncCel.setCadastrar();

        } catch (ParseException e) {
        }
    }//GEN-LAST:event_editarRegistrojButtonActionPerformed

    private void comboCelulaAlterarjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCelulaAlterarjComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboCelulaAlterarjComboBoxActionPerformed

    private void ateOMomentojCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ateOMomentojCheckBoxActionPerformed
        // TODO add your handling code here:
        if(ateOMomentojCheckBox.isSelected()){
            alterToDatejFormattedTextField.setText("30/12/9999");
        }else{
            alterToDatejFormattedTextField.setText(To_date_checkbox);
        }
    }//GEN-LAST:event_ateOMomentojCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFFuncionariosCelulas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new JFFuncionariosCelulas().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField alterFromDatejFormattedTextField;
    private javax.swing.JFormattedTextField alterToDatejFormattedTextField;
    private javax.swing.JButton alterarCelulajButton;
    private javax.swing.JLabel alterarCelulajLabel;
    private javax.swing.JCheckBox ateOMomentojCheckBox;
    private javax.swing.JButton cadastrarCelulajButton;
    private javax.swing.JButton cadastrarNovaCelulajButton;
    private javax.swing.JComboBox comboCelulaAlterarjComboBox;
    private javax.swing.JComboBox comboCelulajComboBox;
    private javax.swing.JLabel dataFromjLabel;
    private com.toedter.calendar.JDateChooser dataNovaCelulajDateChooser;
    private javax.swing.JCheckBox dataPersonalisadajCheckBox;
    private javax.swing.JLabel dataTojLabel;
    private javax.swing.JLabel datajLabel;
    private javax.swing.JButton editarRegistrojButton;
    private javax.swing.JButton editarjButton;
    private javax.swing.JButton excluirjButton;
    private javax.swing.JTable gradeFuncCelulajTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel matriculajLabel;
    private javax.swing.JLabel nomejLabel;
    private javax.swing.JTextField operacaojTextField;
    private javax.swing.JSeparator separadorjSeparator;
    // End of variables declaration//GEN-END:variables
}
