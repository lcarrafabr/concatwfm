/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package concatwfm;

import Classes.*;
import java.awt.HeadlessException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luciano.benfica
 */
public class jFFuncionarioStatus extends javax.swing.JDialog {

    /**
     * Creates new form jFFuncionarioStatus
     */
    public jFFuncionarioStatus() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        statusjComboBox = new javax.swing.JComboBox();
        cadastrarStatusjButton = new javax.swing.JButton();
        alterarStatusjButton = new javax.swing.JButton();
        dataAlteracaojLabel = new javax.swing.JLabel();
        datapersonalizadajCheckBox = new javax.swing.JCheckBox();
        dataNovoStatusjDateChooser = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nomejLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        matriculajLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gradeFuncStatusjTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Status");

        statusjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusjComboBoxActionPerformed(evt);
            }
        });

        cadastrarStatusjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/add_small.png"))); // NOI18N
        cadastrarStatusjButton.setToolTipText("Cadastrar um novo status");
        cadastrarStatusjButton.setContentAreaFilled(false);
        cadastrarStatusjButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cadastrarStatusjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadastrarStatusjButtonActionPerformed(evt);
            }
        });

        alterarStatusjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/save2.png"))); // NOI18N
        alterarStatusjButton.setText("Alterar status");
        alterarStatusjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarStatusjButtonActionPerformed(evt);
            }
        });

        dataAlteracaojLabel.setText("Data do novo status");

        datapersonalizadajCheckBox.setText("Usar data personalizada");
        datapersonalizadajCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datapersonalizadajCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(statusjComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cadastrarStatusjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(alterarStatusjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dataAlteracaojLabel)
                                    .addComponent(dataNovoStatusjDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(datapersonalizadajCheckBox)))
                        .addGap(0, 209, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(2, 2, 2)
                            .addComponent(cadastrarStatusjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(alterarStatusjButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dataAlteracaojLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(datapersonalizadajCheckBox)
                    .addComponent(dataNovoStatusjDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Alterar Status", jPanel1);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jLabel2.setText("Nome:");

        jLabel4.setText("Matr√≠cula:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomejLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(matriculajLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nomejLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(matriculajLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gradeFuncStatusjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data in√≠cio", "Data Fim", "Matr√≠cula", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gradeFuncStatusjTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(gradeFuncStatusjTable);
        gradeFuncStatusjTable.getColumnModel().getColumn(0).setResizable(false);
        gradeFuncStatusjTable.getColumnModel().getColumn(1).setResizable(false);
        gradeFuncStatusjTable.getColumnModel().getColumn(2).setResizable(false);
        gradeFuncStatusjTable.getColumnModel().getColumn(3).setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    ClassConecta conecta = new ClassConecta();
    public String recebe_nome;
    public int recebe_matricula;
    private String data_admissao;
    private String data_atual;
    private int contador;
    private ComboItem combo_status;
    private int status;
    private String data_calcular;
    private String data_final;
    private String from_date_alteracao;

    public void getGrandeFuncionariosStatus() throws ParseException {
        //Consultar pedidos
        FuncionariosStatus oFuncStatus = new FuncionariosStatus();


        ResultSet resultSet = null;

        String[] colunasTabela = new String[]{"Data in√≠cio", "Data Fim", "Matr√≠cula", "Status"};
        DefaultTableModel modeloTabela = new DefaultTableModel(null, colunasTabela) {

            @Override
            public boolean isCellEditable(int row, int col) {
                return false;
            }
        };
        gradeFuncStatusjTable.setModel(modeloTabela);
        gradeFuncStatusjTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        gradeFuncStatusjTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        gradeFuncStatusjTable.getColumnModel().getColumn(2).setPreferredWidth(50);
        gradeFuncStatusjTable.getColumnModel().getColumn(3).setPreferredWidth(50);

        try {

            oFuncStatus.setMatricula(recebe_matricula);
            resultSet = oFuncStatus.getConsultar();

            if (resultSet.getRow() == 1) {
                resultSet.first();
            }


        } catch (SQLException ex) {
            Logger.getLogger(FuncionariosStatus.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {

            while (resultSet.next()) {

                Date FROM_DATE = resultSet.getDate("FROM_DATE");
                String data_from = null;
                if (FROM_DATE != null) {
                    SimpleDateFormat formatoDataLanc = new SimpleDateFormat("dd/MM/yyyy");
                    data_from = formatoDataLanc.format(FROM_DATE);
                }


                Date TO_DATE = resultSet.getDate("TO_DATE");
                String data_to;
                String verifica = null;
                if (TO_DATE != null) {
                    SimpleDateFormat formatoDataLanc = new SimpleDateFormat("dd/MM/yyyy");
                    data_to = formatoDataLanc.format(TO_DATE);

                    if (data_to.equals("30/12/9999")) {
                        verifica = "At√© o momento";
                    } else {
                        verifica = data_to;
                    }

                }

                modeloTabela.addRow(new String[]{
                            //                            resultSet.getString("FROM_DATE"),
                            data_from,
                            verifica,
                            resultSet.getString("MATRICULA"),
                            resultSet.getString("STATUS_NAME")
                        });

            }

        } catch (SQLException ex) {
            Logger.getLogger(FuncionariosStatus.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void getConsultarDataAdmissao() {

        Funcionarios oFunc = new Funcionarios();

        ResultSet rs;
        oFunc.setMatricula(recebe_matricula);
        try {
            rs = oFunc.getConsultar();
            while (rs.next()) {

                data_admissao = Funcoes.getDataFormat(rs.getDate("HIREDATE"));
            }

        } catch (SQLException | ParseException e) {
            JOptionPane.showMessageDialog(null, "Erro ao consultar data de admiss√£o.\n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void getConsultarStatus() throws ParseException {

        FuncionariosStatus oFuncStatus = new FuncionariosStatus();

        ResultSet rs;
        oFuncStatus.setMatricula(recebe_matricula);
        try {
            rs = oFuncStatus.getConsultarStatus();
            while (rs.next()) {

                status = rs.getInt("STATUSID");
                from_date_alteracao = Funcoes.getDataFormat(rs.getDate("FROM_DATE"));
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao consultar data de admiss√£o.\n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void contaLinhasGrade() {

        contador = gradeFuncStatusjTable.getRowCount();

    }

    private void atualizarGrade() {
        try {
            getGrandeFuncionariosStatus();
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar grade.\n" + e,
                    "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void atualizaComboStatus() {
        try {
            CadastroStatus oCadStatus = new CadastroStatus();
            ResultSet rs;
            rs = oCadStatus.getConsultar();
            statusjComboBox.removeAllItems();
            while (rs.next()) {
                statusjComboBox.addItem(new ComboItem(rs.getInt(1), rs.getString(2)));
            }
            statusjComboBox.updateUI();
        } catch (SQLException ex) {
            Logger.getLogger(jFFuncionarioStatus.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void calculaData() throws ParseException {

        Calendar c = Calendar.getInstance();
        c.setTime(Funcoes.getDataFormatBR(data_calcular));
        c.add(Calendar.DATE, -1);

        data_final = Funcoes.getDataFormat(c.getTime());
    }

    private void updateStatus() {
        try {
            getConsultarStatus();
        } catch (ParseException ex) {
            Logger.getLogger(jFFuncionarioStatus.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            if (datapersonalizadajCheckBox.isSelected()) {

                SimpleDateFormat oDatOut = new SimpleDateFormat("dd/MM/yyyy");
                data_calcular = oDatOut.format(dataNovoStatusjDateChooser.getDate());

                calculaData();
            } else {

                data_calcular = data_atual;
                calculaData();
            }
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Erro ao calcular datas\n" + e, "mensagem do sistema", JOptionPane.ERROR_MESSAGE);
        }

        if (statusjComboBox.getSelectedItem().equals("")) {

            JOptionPane.showMessageDialog(null, "O campo STATUS √© obrigat√≥rio.", "Mensagem do sistema", JOptionPane.WARNING_MESSAGE);

        } else {

            try {

                FuncionariosStatus oFuncStatus = new FuncionariosStatus();

                oFuncStatus.setUpdate_from_date(Funcoes.getDataFormatBR(from_date_alteracao));
                oFuncStatus.setFrom_date(Funcoes.getDataFormatBR(from_date_alteracao));

                oFuncStatus.setMatricula(recebe_matricula);
                oFuncStatus.setStatus_id(status);
                oFuncStatus.setTo_date(Funcoes.getDataFormatBR(data_final));
                oFuncStatus.setUpdate_from_date(Funcoes.getDataFormatBR("30/12/9999"));
                oFuncStatus.setAlterar(conecta);

            } catch (ParseException e) {
                JOptionPane.showMessageDialog(null, "Erro ao registrar o status.\n" + e,
                        "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
            }

        }
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        dataNovoStatusjDateChooser.setEnabled(false);
        dataAlteracaojLabel.setEnabled(false);
        nomejLabel.setText(recebe_nome);
        matriculajLabel.setText(Integer.toString(recebe_matricula));
//        statusjComboBox.grabFocus();

        try {
            ClassConecta.conecta();
        } catch (Exception e) {
        }

        try {
            data_atual = Funcoes.getNowBR();
        } catch (ParseException e) {
        }

        atualizaComboStatus();
        atualizarGrade();
        contaLinhasGrade();
        getConsultarDataAdmissao();
        try {
            getConsultarStatus();
        } catch (ParseException ex) {
            Logger.getLogger(jFFuncionarioStatus.class.getName()).log(Level.SEVERE, null, ex);
        }
        alterarStatusjButton.setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    private void cadastrarStatusjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadastrarStatusjButtonActionPerformed
        // TODO add your handling code here:
        jFCadastroStatus oFormCadStatus = new jFCadastroStatus();

        oFormCadStatus.setTitle("Cadastro status");
        oFormCadStatus.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        oFormCadStatus.setLocationRelativeTo(null);
        oFormCadStatus.setModal(true);
        oFormCadStatus.pack();
        oFormCadStatus.setVisible(true);

        atualizaComboStatus();
    }//GEN-LAST:event_cadastrarStatusjButtonActionPerformed

    private void datapersonalizadajCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datapersonalizadajCheckBoxActionPerformed
        // TODO add your handling code here:
        if (datapersonalizadajCheckBox.isSelected()) {
            dataNovoStatusjDateChooser.setEnabled(true);
            dataAlteracaojLabel.setEnabled(true);
            dataNovoStatusjDateChooser.grabFocus();
        } else {
            dataNovoStatusjDateChooser.setEnabled(false);
            dataAlteracaojLabel.setEnabled(false);
            dataNovoStatusjDateChooser.setDate(null);
        }
    }//GEN-LAST:event_datapersonalizadajCheckBoxActionPerformed

    private void alterarStatusjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarStatusjButtonActionPerformed
        // TODO add your handling code here:


        if (statusjComboBox.getSelectedItem().equals("")) {

            JOptionPane.showMessageDialog(null, "O campo STATUS √© obrigat√≥rio.", "Mensagem do sistema", JOptionPane.WARNING_MESSAGE);

        } else {

            try {

                FuncionariosStatus oFuncStatus = new FuncionariosStatus();

                combo_status = (ComboItem) statusjComboBox.getSelectedItem();


                if (contador == 0) {

                    oFuncStatus.setFrom_date(Funcoes.getDataFormatBR(data_admissao));
                    oFuncStatus.setStatus_id(combo_status.getId());
                    oFuncStatus.setMatricula(recebe_matricula);
                    oFuncStatus.setTo_date(Funcoes.getDataFormatBR("30/12/9999"));
                    oFuncStatus.setCadastrar();

//---------------------------------------------------------------------------------------------------------------------------------         

                } else {

//---------------------------------------------------------------------------------------------------------------------------------

                    updateStatus();
                    String data;
                    if (datapersonalizadajCheckBox.isSelected()) {

                        SimpleDateFormat oDatOut = new SimpleDateFormat("dd/MM/yyyy");
                        data = oDatOut.format(dataNovoStatusjDateChooser.getDate());

                    } else {

                        data = data_atual;
                    }

                    oFuncStatus.setFrom_date(Funcoes.getDataFormatBR(data));
                    oFuncStatus.setStatus_id(combo_status.getId());
                    oFuncStatus.setMatricula(recebe_matricula);
                    oFuncStatus.setTo_date(Funcoes.getDataFormatBR("30/12/9999"));
                    oFuncStatus.setCadastrar();

                }

            } catch (ParseException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, "Erro ao registrar o status.\n" + e,
                        "Mensagem do sistema", JOptionPane.ERROR_MESSAGE);
            }

        }

        atualizarGrade();
        contaLinhasGrade();

        try {
            ClassConecta.con.setAutoCommit(false);
        } catch (SQLException ex) {
            Logger.getLogger(Funcionarios.class.getName()).log(Level.SEVERE, null, ex);
        }
        alterarStatusjButton.setEnabled(false);
    }//GEN-LAST:event_alterarStatusjButtonActionPerformed

    private void statusjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusjComboBoxActionPerformed
        // TODO add your handling code here:
        alterarStatusjButton.setEnabled(true);
    }//GEN-LAST:event_statusjComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jFFuncionarioStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new jFFuncionarioStatus().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton alterarStatusjButton;
    private javax.swing.JButton cadastrarStatusjButton;
    private javax.swing.JLabel dataAlteracaojLabel;
    private com.toedter.calendar.JDateChooser dataNovoStatusjDateChooser;
    private javax.swing.JCheckBox datapersonalizadajCheckBox;
    private javax.swing.JTable gradeFuncStatusjTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel matriculajLabel;
    private javax.swing.JLabel nomejLabel;
    private javax.swing.JComboBox statusjComboBox;
    // End of variables declaration//GEN-END:variables
}
